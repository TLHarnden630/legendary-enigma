
name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Lint (Python & Node)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Run linters
        shell: bash
        run: |
          set -euo pipefail
          echo "Running linters"

          did_any=false

          # Python linting: prefer ruff, fall back to flake8
          if ls **/*.py >/dev/null 2>&1; then
            python -m pip install --upgrade pip
            python -m pip install ruff flake8 --quiet
            if command -v ruff >/dev/null 2>&1; then
              echo "Running ruff"
              ruff check .
            else
              echo "Running flake8"
              flake8 .
            fi
            did_any=true
          fi

          # Node linting
          if [ -f package.json ]; then
            npm ci --silent
            npm run lint --if-present
            did_any=true
          fi

          if [ "$did_any" = false ]; then
            echo "No lintable files found — skipping linters"
          fi

  test:
    name: Test (Python & Node)
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        include:
          - python-version: '3.10'
            node-version: '16'
          - python-version: '3.11'
            node-version: '18'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Run tests and collect coverage
        shell: bash
        run: |
          set -euo pipefail
          echo "Running tests (Python: ${{ matrix.python-version }}, Node: ${{ matrix.node-version }})"
          mkdir -p ci-artifacts
          did_any=false

          if [ -f requirements.txt ]; then
            echo "Python tests: installing requirements"
            python -m pip install --upgrade pip
            python -m pip install -r requirements.txt
            if command -v pytest >/dev/null 2>&1; then
              echo "Running pytest with coverage"
              pytest --maxfail=1 --disable-warnings -q --cov=. --cov-report=xml --cov-report=html
              if [ -d htmlcov ]; then
                mkdir -p ci-artifacts/htmlcov-${{ matrix.python-version }} || true
                cp -r htmlcov ci-artifacts/htmlcov-${{ matrix.python-version }} || true
              fi
              if [ -f coverage.xml ]; then
                cp coverage.xml ci-artifacts/coverage-python-${{ matrix.python-version }}.xml || true
              fi
              did_any=true
            else
              echo "pytest not available — skipping python tests"
            fi
          fi

          if [ -f package.json ]; then
            echo "Node tests: installing"
            npm ci --silent
            npm test --if-present
            if [ -d coverage ]; then
              mkdir -p ci-artifacts/coverage-node-${{ matrix.node-version }} || true
              cp -r coverage ci-artifacts/coverage-node-${{ matrix.node-version }} || true
            fi
            did_any=true
          fi

          if [ "$did_any" = false ]; then
            echo "No tests found — nothing executed"
          fi

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts-${{ matrix.python-version }}-${{ matrix.node-version }}
          path: ci-artifacts

  artifacts:
    name: Package artifacts
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          name: test-artifacts
          path: downloaded-artifacts

      - name: Inspect and re-package artifacts
        shell: bash
        run: |
          set -euo pipefail
          echo "Contents of downloaded-artifacts:"
          ls -la downloaded-artifacts || true
          mkdir -p packaged
          cp -r downloaded-artifacts/* packaged/ || true
          # create a zip to upload as final artifact
          pushd packaged >/dev/null || true
          zip -r ../ci-packaged.zip . || true
          popd >/dev/null || true

      - name: Upload packaged CI artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ci-packaged-artifacts
          path: ci-packaged.zip

